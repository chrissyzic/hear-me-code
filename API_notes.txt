VOCAB
endpoint = location(s) where data are stored
parameters = "?" in URL tells you parameters are coming next, "&" lets you add additional search parameters
key = password that lets you use the API, some people are really stingy about giving out keys

http://openstates.org/api/v1/legislators?api_key=XXXXXX&state=wisconsin

API in Python
1. use request to act like a browser
2. store info you get back
3. process, combine, and/or display it
4. profit!

Detour: Libraries/Modules
Some libraries/modules come with Python, but they don't get loaded right away - you have to import them, e.g. csv, datetime, os
SOME modules have to be installed, e.g. django, numby (for complicated math), requests (for hitting APIs)
--> easiest wat to install modules (that need installing) is by using PIP, i.e. pip install modulename

Let's look at an example!
https://api.github.com/repos/sunlightlabs/openstates/issues?state=closed
JSON - notation and formatting that makes it look pretty (XML is another format), basically it's a method that interprets the data in an API and spits it back out in a readable format (aka a Python dictionary)
this is basically a nested list of Python dictionaries

API in Python
You CAN open APIs in a browser (like in the Sunlight example above)
But, if you want to play with the data, it's best to use Python
Most API data comes in pages b/c otherwise the data would go on forever.
Think about: what happens when you run out of data?
